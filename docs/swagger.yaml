definitions:
  entity.Auth:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  entity.User:
    properties:
      address:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  request.AuthRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  request.UserCreateRequest:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - email
    - name
    type: object
  request.UserUpdateRequest:
    properties:
      address:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - name
    type: object
  response.User:
    properties:
      address:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  utils.ErrorResponseSwagger:
    properties:
      data: {}
      message: {}
      status:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample API.
  title: My API
  version: "1.0"
paths:
  /auth-create:
    post:
      consumes:
      - application/json
      description: Create login user with email,password
      operationId: create-login-user
      parameters:
      - description: Create login data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Auth'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      summary: Create login user
  /login:
    post:
      consumes:
      - application/json
      description: login with email,password
      operationId: login-user
      parameters:
      - description: 'Login data (default value: Email=test@email.com,Password=12345)'
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Auth'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      summary: Login user
  /user:
    get:
      description: Get user
      operationId: get-user
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        type: integer
      - description: Search query
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
      security:
      - Bearer: []
      summary: Get user
    post:
      consumes:
      - application/json
      description: Create a new user with name, email, phone, and address
      operationId: create-user
      parameters:
      - description: User data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - Bearer: []
      summary: Create User
  /user/{id}:
    delete:
      description: delete user
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - Bearer: []
      summary: Delete User
    get:
      description: Get user By ID
      operationId: get-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - Bearer: []
      summary: Get user By ID
    patch:
      consumes:
      - application/json
      description: Update user with name, phone, and address
      operationId: update-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponseSwagger'
      security:
      - Bearer: []
      summary: Update User
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
